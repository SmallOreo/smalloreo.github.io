<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://smalloreo.github.io</id>
    <title>奥利奥</title>
    <updated>2021-02-26T13:11:14.776Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://smalloreo.github.io"/>
    <link rel="self" href="https://smalloreo.github.io/atom.xml"/>
    <subtitle>博学而笃志，厚积而薄发</subtitle>
    <logo>https://smalloreo.github.io/images/avatar.png</logo>
    <icon>https://smalloreo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 奥利奥</rights>
    <entry>
        <title type="html"><![CDATA[UnityAPI第八讲笔记 | 让物体移动的脚本]]></title>
        <id>https://smalloreo.github.io/UnityAPI04/</id>
        <link href="https://smalloreo.github.io/UnityAPI04/">
        </link>
        <updated>2021-02-26T12:40:16.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="第一种方法">第一种方法</h2>
<pre><code>void Update()
{
        this.transform.Translate(Vector3.forward * Time.deltaTime);
}
}
</code></pre>
<p>通过语句<code>this.transform.Translate(Vector3.forward * Time.deltaTime);</code>对物体Cube进行变换移动，</p>
<p><a href="http://www.sikiedu.com/course/59/task/36834/show">视频课程</a>案例中使用了<s>可能较老</s>的方法语句<code>Cube.transform.Translate(Vector3.forward * Time.deltaTime);</code>但现在我进行测试发现此语句无法运行，会报错。经过搜索，得出应把<code>Cube.transfrom</code>改成<code>this.transfrom</code>，结果就可以了。</p>
<h3 id="代码脚注">代码脚注</h3>
<p>这段移动代码中，采用了<code>Vector3.forward*Time.deltaTime</code>的方法对速度进行一个缓和控制，以每秒为时间单位进行向前移动。<strong>这样可以得以避免速度太快或受玩家电脑硬件影响（帧率高低快慢，每秒1米速度）</strong></p>
<h2 id="第二种移动方法">第二种移动方法</h2>
<pre><code>void Update()
{
        this.transform.Translate(Vector3.forward / 50f);
}
}
</code></pre>
<h3 id="代码脚注-2">代码脚注</h3>
<p>这个方法跟第一种不同点在于，它除以了50来确保速度平和。<strong>这是因为之前每秒不除以50时每秒运动50米，所以除50得到每秒运动1米。</strong></p>
<h2 id="如何让物体移动速度变快一点">如何让物体移动速度变快一点？</h2>
<p>在第一种方法上<code>Time.deltaTime</code>后面乘上相应的倍数**(实则上就是相应的每秒运动多少米)</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="第一种方法">第一种方法</h2>
<pre><code>void Update()
{
        this.transform.Translate(Vector3.forward * Time.deltaTime);
}
}
</code></pre>
<p>通过语句<code>this.transform.Translate(Vector3.forward * Time.deltaTime);</code>对物体Cube进行变换移动，</p>
<p><a href="http://www.sikiedu.com/course/59/task/36834/show">视频课程</a>案例中使用了<s>可能较老</s>的方法语句<code>Cube.transform.Translate(Vector3.forward * Time.deltaTime);</code>但现在我进行测试发现此语句无法运行，会报错。经过搜索，得出应把<code>Cube.transfrom</code>改成<code>this.transfrom</code>，结果就可以了。</p>
<h3 id="代码脚注">代码脚注</h3>
<p>这段移动代码中，采用了<code>Vector3.forward*Time.deltaTime</code>的方法对速度进行一个缓和控制，以每秒为时间单位进行向前移动。<strong>这样可以得以避免速度太快或受玩家电脑硬件影响（帧率高低快慢，每秒1米速度）</strong></p>
<h2 id="第二种移动方法">第二种移动方法</h2>
<pre><code>void Update()
{
        this.transform.Translate(Vector3.forward / 50f);
}
}
</code></pre>
<h3 id="代码脚注-2">代码脚注</h3>
<p>这个方法跟第一种不同点在于，它除以了50来确保速度平和。<strong>这是因为之前每秒不除以50时每秒运动50米，所以除50得到每秒运动1米。</strong></p>
<h2 id="如何让物体移动速度变快一点">如何让物体移动速度变快一点？</h2>
<p>在第一种方法上<code>Time.deltaTime</code>后面乘上相应的倍数**(实则上就是相应的每秒运动多少米)</p>
<!-- more -->
<p>**即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AR项目跟做 Le.9：完成UI设计]]></title>
        <id>https://smalloreo.github.io/m1cgfXnX0/</id>
        <link href="https://smalloreo.github.io/m1cgfXnX0/">
        </link>
        <updated>2021-02-16T09:16:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="本课概括">本课概括</h2>
<p><img src="https://smalloreo.github.io/post-images/1613467101852.png" alt="" loading="lazy"><br>
今天我学习完了第九节课程，主要讲述了UnityGUI的一些搭建设计。</p>
<h2 id="问题难点">问题/难点</h2>
<p>在课程学习当中，我遇到了以下一些棘手的问题：</p>
<ul>
<li><strong>物体锚点的小蓝点凭空消失</strong></li>
<li><strong>ScrollReft/Parent/Targetltem导入至新建的Parfats文件夹时由于事先导入错误，故删除修改无法重新导入</strong></li>
</ul>
<h2 id="问题解决方案">问题解决方案</h2>
<h3 id="物体锚点的小蓝点凭空消失">物体锚点的小蓝点凭空消失</h3>
<p>我咨询了一位大佬后，大佬耐心地指导了我。具体解决方法为：<strong>Scence面板中，按数字2键</strong>之后我又切回2D面板，蓝点出现。问题解决。🎯</p>
<h3 id="无法重新导入解决方案">无法重新导入解决方案</h3>
<p>我打算认怂，不敢把时间葬送在这个问题上。故采取了最笨最容易的方法：<strong>删了重做</strong>🎯</p>
<h2 id="课程成品展示">课程成品展示</h2>
<p><img src="https://smalloreo.github.io/post-images/1613467891703.png" alt="" loading="lazy"><br>
<img src="https://smalloreo.github.io/post-images/1613467901324.png" alt="" loading="lazy"></p>
<h2 id="需要修改bug之点">需要修改/BUG之点</h2>
<ul>
<li>英文命名待需检查，以免后期写脚本时出现错误或浪费时间</li>
<li>不能自动排列图片一致间隔，需要手动调整（<strong>BUG</strong>）</li>
<li>是否考虑图片框过小？</li>
</ul>
<p>本次的内容就到这里啦！希望等到1个月之后，我能跟着视频做出来一个像样的Unity作品！！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机科学导论第一章习题答案]]></title>
        <id>https://smalloreo.github.io/0PUj8oQnF/</id>
        <link href="https://smalloreo.github.io/0PUj8oQnF/">
        </link>
        <updated>2021-02-14T03:39:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="复习题">复习题<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h2>
<p><strong>1.定义一个基于图灵模型的计算机</strong><br>
一台可以输入/输出、使用相应程序处理任意需要计算的数据处理器</p>
<p><strong>2.定义一个基于冯·诺依曼模型的计算机</strong><br>
计算机中拥有四个子系统，控制单元、输入/输出单元、存储单元、算术逻辑单元。其中程序和数据都可以存储在存储单元中</p>
<p><strong>3.在基于图灵模型的计算机中，程序的作用是什么</strong><br>
程序是告诉计算机如何处理数据的一个指令集合</p>
<p><strong>4.在基于冯·诺依曼模型的计算机中，程序的作用是什么</strong><br>
在冯·诺依曼模型中规定程序必须存储在存储器中</p>
<p><strong>5.计算机中有哪些子系统？</strong><br>
控制单元，输入/输出单元，存储器，算术逻辑单元</p>
<p><strong>6.计算机中存储器子系统的功能是什么</strong><br>
存储数据和程序的单元</p>
<p><strong>7.计算机中的ALU子系统的功能是什么</strong><br>
提供计算和逻辑运算的单元</p>
<p><strong>8.计算机中控制单元的子系统的功能是什么</strong><br>
控制输入/输出、存储、算术逻辑单元</p>
<p><strong>9.计算机中输入/输出子系统的功能是什么</strong><br>
提供外部的输入和提供输出功能，可以提供输入/输出硬件有很多，如：硬盘，键盘，鼠标</p>
<p><strong>10.简述5个时代的计算机</strong><br>
第一代计算机只有专家才能使用，体积庞大，使用真空管<br>
第二代计算机使用了晶体管代替了真空管，体积减小，成本减少，中小型企业也可以使用<br>
第三代计算机使用集成电路，小型计算机出现，软件工程诞生<br>
第四代计算机出现微型计算机，第一个桌面计算机问世，计算机网络出现<br>
第五代计算机起始于1985年，还未结束，多媒体的应用，AR/VR的出现，台式计算机和笔记本电脑的实现，存储设备的升级等</p>
<h2 id="练习题">练习题</h2>
<p><strong>1.解释为什么计算机不能解决那些计算机外部世界无法解决的问题</strong><br>
计算机的处理数据的解决方案来自于程序，程序是由外部进行编写的。外部无法处理的问题也无法在计算机中解决</p>
<p><strong>2.如果一台小的便宜的计算机可以做大型昂贵的计算机同样能做的事情，为什么人们还需要大型计算机？</strong><br>
虽然小型计算机可以处理同样的问题，但是处理需要的时间可能不同。在同时代的大型计算机比小型计算机处理的更快，时间更短（PS：当然，科技的进步以后有可能会打破这样的限制）</p>
<p><strong>3.研究Pascaline计算机，看看它是否符合图灵模型</strong><br>
Pascsline只是能运行加减运算的计算器，不符合图灵模型</p>
<p><strong>4.研究莱布尼兹之轮（Leibnitz’s Wheel），看看它是否符合图灵模型</strong><br>
虽然莱布尼兹之轮能够进行更加复杂的运算，但是它没有程序的概念，不符合图灵模型</p>
<p><strong>5.研究雅卡尔提花织机（Jacquard loom），看看它是否符合图灵模型</strong><br>
雅卡尔提花织机利用穿孔卡（类似存储程序）来控制机器，拥有输出的经线提升的输出单元，读取穿孔卡的输入单元，所以它符合图灵模型</p>
<p><strong>6.研究查尔斯·巴比奇分析引擎，看看它是否符合冯·诺依曼模型</strong><br>
查尔斯·巴比奇分析引擎虽然拥有类似冯·诺依曼模型的四个子系统，但是程序无法存储在存储器中，所以不符合冯·诺依曼模型</p>
<p><strong>7.研究ABC计算机，看看它是否符合冯·诺依曼模型</strong><br>
ABC计算机并没有将程序存储在存储器中，计算机是在外部编程的，所以不符合冯·诺依曼模型</p>
<p><strong>8.研究并找出键盘起源于哪一代计算机</strong><br>
计算机键盘出现在第二代计算机末期，第三代初期(第一个键盘与多用户系统均在1964出现，也就是在第二代计算机末期和第三代计算机初期出现)</p>
<h2 id="附加选择">附加选择</h2>
<p>11.现在的计算机是基于_____模型。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
<p>12.在计算机中，_____子系统存储数据和程序。<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p>
<p>13.在计算机中，_____子系统执行计算和逻辑运算。<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p>
<p>14.在计算机中，_____子系统接收数据和程序并将运算传给输出设备。<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></p>
<p>15.在计算机中，_____子系统是其他子系统的管理者。<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></p>
<p>16.根据冯·诺伊曼模型，_____被存在存储器中。<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></p>
<p>17.问题的分步骤解决被称为_____。<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></p>
<p>18.FORTRAN和COBOL是_____的例子。<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup></p>
<p>19.在17世纪能执行加法和减法运算的计算机器是______. <sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup></p>
<p>20.在计算机语言中，______是告诉计算机如何处理数据的一系列指令。<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup></p>
<p>21.______是以结构化的形式来设计和编写程序。<sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup></p>
<p>22.第一台特殊用途的电子计算机被称为______. <sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup></p>
<p>23.第一代基于冯·诺伊曼模型的计算机有一个被称为______. <sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup></p>
<p>24.第一台使用存储和编程的计算机被称为______. <sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup></p>
<p>25.______将程序设计任务从计算机运算任务中分离出来。<sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>本答案及附加题均转载自CSDN <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>b.冯·诺伊曼 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>c.存储器 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>a.算术逻辑单元（ALU） <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>b.输入/输出 <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>d,控制单元 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>c.数据和程序 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>d.算法 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>c.计算机语言 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>a.Pascaline <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>d.程序 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>a.软件工程 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>c.ABC <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>d.EDVAC <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>d.the Jacquard loom <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p>c.高级程序设计语言 <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[对一个程序（面试题）的个人理解【C#】]]></title>
        <id>https://smalloreo.github.io/dui-yi-ge-cheng-xu-mian-shi-ti-de-ge-ren-li-jie/</id>
        <link href="https://smalloreo.github.io/dui-yi-ge-cheng-xu-mian-shi-ti-de-ge-ren-li-jie/">
        </link>
        <updated>2021-02-06T03:03:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="面试题目">面试题目<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h2>
<p>**经典面试题：有一组数1、1、2、3、5、8、13、21、34....，要求算出这组数的第30个数是多少？  **</p>
<h2 id="题目分析">题目分析</h2>
<p>先找规律：<br>
<strong>第三个数字是前两个数字之和</strong></p>
<p><em>以题目中的数字为例:</em><br>
第三位数<strong>2</strong>=它前两个数字<strong>1</strong>与<strong>1</strong>之和<br>
第四位数<strong>3</strong>=它前面两个数字<strong>1</strong>与<strong>2</strong>之和<br>
....</p>
<h2 id="程序代码">程序代码</h2>
<pre><code>//代码来源于《零基础学C#》😃
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Demo
{
    class Program
    {
        static void Main(string[] args)
        {
            int num1 = 1, num2 = 1, temp;//定义3个变量，num1用来记录
            for (int i = 2; i &lt; 30; i++)
            {
                num1 += num2;//后一个数字是前两个数字之和
                //交换num1和num2的值
                temp = num1;
                num1 = num2;
                num2 = temp;
            }
            Console.WriteLine(&quot;第 30 个数为：&quot; + num2);//输出指定位数上的数据
            Console.ReadLine();
        }
    }
}
</code></pre>
<h2 id="代码分析">代码分析</h2>
<p>最开始的时候我有个疑问点：<strong>为什么在for循环中的i要定义成2？</strong></p>
<p>之后认为（回答解决）：因为第一个数字（1）前面应该还有一个数字<strong>0</strong>，这样第二个数字1才能根据前面的1和0推理出来。<strong>所以综上所述，i应赋值为2</strong></p>
<p>之后，代码创建一个Temp变量作为中专站交换num1和num2的数值</p>
<p>最终用<code>Console.WriteLine();</code>函数输出<code>num2</code>的值。得出第30个数</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>该内容为个人理解，不确保理论准确性 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
</feed>